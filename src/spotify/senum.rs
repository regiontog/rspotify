//! All enums for rspotify
use std::fmt;
/// Album type - ‘album’, ‘single’, ‘appears_on’, ‘compilation’
#[derive(Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum AlbumType {
    Album,
    Single,
    AppearsOn,
    Compilation,
}
impl AlbumType {
    pub fn from_str(s: &str) -> Option<AlbumType> {
        match s {
            "album" => Some(AlbumType::Album),
            "single" => Some(AlbumType::Single),
            "appears_on" => Some(AlbumType::AppearsOn),
            "compilation" => Some(AlbumType::Compilation),
            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            AlbumType::Album => "album",
            AlbumType::Single => "single",
            AlbumType::AppearsOn => "appears_on",
            AlbumType::Compilation => "compilation",
        }
    }
}
impl fmt::Debug for AlbumType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AlbumType::Album => write!(f, "album"),
            AlbumType::Single => write!(f, "single"),
            AlbumType::AppearsOn => write!(f, "appears_on"),
            AlbumType::Compilation => write!(f, "compilation"),
        }
    }
}

///  Type: ‘artist’, ‘album’,‘track’ or ‘playlist’
#[derive(Clone, Serialize, Deserialize, Copy, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum Type {
    Artist,
    Album,
    Track,
    Playlist,
    User,
}

impl Type {
    pub fn from_str(s: &str) -> Option<Type> {
        match s {
            "artist" => Some(Type::Artist),
            "album" => Some(Type::Album),
            "track" => Some(Type::Track),
            "playlist" => Some(Type::Playlist),
            "user" => Some(Type::User),
            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            Type::Album => "album",
            Type::Artist => "artist",
            Type::Track => "track",
            Type::Playlist => "playlist",
            Type::User => "user",
        }
    }
}

impl fmt::Debug for Type {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Type::Album => write!(f, "album"),
            Type::Artist => write!(f, "artist"),
            Type::Track => write!(f, "track"),
            Type::Playlist => write!(f, "playlist"),
            Type::User => write!(f, "user"),
        }
    }
}

/// time range: long-term, medium-term, short-term
#[derive(Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum TimeRange {
    LongTerm,
    MediumTerm,
    ShortTerm,
}

impl TimeRange {
    pub fn from_str(s: &str) -> Option<TimeRange> {
        match s {
            "long_term" => Some(TimeRange::LongTerm),
            "medium_term" => Some(TimeRange::MediumTerm),
            "short_term" => Some(TimeRange::ShortTerm),
            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            TimeRange::LongTerm => "long_term",
            TimeRange::MediumTerm => "medium_term",
            TimeRange::ShortTerm => "short_term",
        }
    }
}

impl fmt::Debug for TimeRange {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            TimeRange::LongTerm => write!(f, "long_term"),
            TimeRange::MediumTerm => write!(f, "medium_term"),
            TimeRange::ShortTerm => write!(f, "short_term"),
        }
    }
}
///ISO 3166-1 alpha-2 country code, [wiki about ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
///Source from [country-list](https://datahub.io/core/country-list)
#[derive(Clone, Serialize, Deserialize)]
pub enum Country {
    Afghanistan,
    AlandIslands,
    Albania,
    Algeria,
    AmericanSamoa,
    Andorra,
    Angola,
    Anguilla,
    Antarctica,
    AntiguaAndBarbuda,
    Argentina,
    Armenia,
    Aruba,
    Australia,
    Austria,
    Azerbaijan,
    Bahamas,
    Bahrain,
    Bangladesh,
    Barbados,
    Belarus,
    Belgium,
    Belize,
    Benin,
    Bermuda,
    Bhutan,
    BoliviaPlurinationalStateOf,
    BonaireSintEustatiusAndSaba,
    BosniaAndHerzegovina,
    Botswana,
    BouvetIsland,
    Brazil,
    BritishIndianOceanTerritory,
    BruneiDarussalam,
    Bulgaria,
    BurkinaFaso,
    Burundi,
    Cambodia,
    Cameroon,
    Canada,
    CapeVerde,
    CaymanIslands,
    CentralAfricanRepublic,
    Chad,
    Chile,
    China,
    ChristmasIsland,
    CocosKeelingIslands,
    Colombia,
    Comoros,
    Congo,
    CongoTheDemocraticRepublicOfThe,
    CookIslands,
    CostaRica,
    CoteDivoire,
    Croatia,
    Cuba,
    Curacao,
    Cyprus,
    CzechRepublic,
    Denmark,
    Djibouti,
    Dominica,
    DominicanRepublic,
    Ecuador,
    Egypt,
    ElSalvador,
    EquatorialGuinea,
    Eritrea,
    Estonia,
    Ethiopia,
    FalklandIslandsMalvinas,
    FaroeIslands,
    Fiji,
    Finland,
    France,
    FrenchGuiana,
    FrenchPolynesia,
    FrenchSouthernTerritories,
    Gabon,
    Gambia,
    Georgia,
    Germany,
    Ghana,
    Gibraltar,
    Greece,
    Greenland,
    Grenada,
    Guadeloupe,
    Guam,
    Guatemala,
    Guernsey,
    Guinea,
    GuineaBissau,
    Guyana,
    Haiti,
    HeardIslandAndMcdonaldIslands,
    HolySeeVaticanCityState,
    Honduras,
    HongKong,
    Hungary,
    Iceland,
    India,
    Indonesia,
    IranIslamicRepublicOf,
    Iraq,
    Ireland,
    IsleOfMan,
    Israel,
    Italy,
    Jamaica,
    Japan,
    Jersey,
    Jordan,
    Kazakhstan,
    Kenya,
    Kiribati,
    KoreaDemocraticPeopleRepublicOf,
    KoreaRepublicOf,
    Kuwait,
    Kyrgyzstan,
    LaoPeopleDemocraticRepublic,
    Latvia,
    Lebanon,
    Lesotho,
    Liberia,
    Libya,
    Liechtenstein,
    Lithuania,
    Luxembourg,
    Macao,
    MacedoniaTheFormerYugoslavRepublicOf,
    Madagascar,
    Malawi,
    Malaysia,
    Maldives,
    Mali,
    Malta,
    MarshallIslands,
    Martinique,
    Mauritania,
    Mauritius,
    Mayotte,
    Mexico,
    MicronesiaFederatedStatesOf,
    MoldovaRepublicOf,
    Monaco,
    Mongolia,
    Montenegro,
    Montserrat,
    Morocco,
    Mozambique,
    Myanmar,
    Namibia,
    Nauru,
    Nepal,
    Netherlands,
    NewCaledonia,
    NewZealand,
    Nicaragua,
    Niger,
    Nigeria,
    Niue,
    NorfolkIsland,
    NorthernMarianaIslands,
    Norway,
    Oman,
    Pakistan,
    Palau,
    PalestineStateOf,
    Panama,
    PapuaNewGuinea,
    Paraguay,
    Peru,
    Philippines,
    Pitcairn,
    Poland,
    Portugal,
    PuertoRico,
    Qatar,
    Reunion,
    Romania,
    RussianFederation,
    Rwanda,
    SaintBarthelemy,
    SaintHelenaAscensionAndTristanDaCunha,
    SaintKittsAndNevis,
    SaintLucia,
    SaintMartinFrenchPart,
    SaintPierreAndMiquelon,
    SaintVincentAndTheGrenadines,
    Samoa,
    SanMarino,
    SaoTomeAndPrincipe,
    SaudiArabia,
    Senegal,
    Serbia,
    Seychelles,
    SierraLeone,
    Singapore,
    SintMaartenDutchPart,
    Slovakia,
    Slovenia,
    SolomonIslands,
    Somalia,
    SouthAfrica,
    SouthGeorgiaAndTheSouthSandwichIslands,
    SouthSudan,
    Spain,
    SriLanka,
    Sudan,
    Suriname,
    SvalbardAndJanMayen,
    Swaziland,
    Sweden,
    Switzerland,
    SyrianArabRepublic,
    TaiwanProvinceOfChina,
    Tajikistan,
    TanzaniaUnitedRepublicOf,
    Thailand,
    TimorLeste,
    Togo,
    Tokelau,
    Tonga,
    TrinidadAndTobago,
    Tunisia,
    Turkey,
    Turkmenistan,
    TurksAndCaicosIslands,
    Tuvalu,
    Uganda,
    Ukraine,
    UnitedArabEmirates,
    UnitedKingdom,
    UnitedStates,
    UnitedStatesMinorOutlyingIslands,
    Uruguay,
    Uzbekistan,
    Vanuatu,
    VenezuelaBolivarianRepublicOf,
    VietNam,
    VirginIslandsBritish,
    VirginIslandsUS,
    WallisAndFutuna,
    WesternSahara,
    Yemen,
    Zambia,
    Zimbabwe,
}
impl Country {
    pub fn from_str(s: &str) -> Option<Country> {
        match s {
            "AF" => Some(Country::Afghanistan),
            "AX" => Some(Country::AlandIslands),
            "AL" => Some(Country::Albania),
            "DZ" => Some(Country::Algeria),
            "AS" => Some(Country::AmericanSamoa),
            "AD" => Some(Country::Andorra),
            "AO" => Some(Country::Angola),
            "AI" => Some(Country::Anguilla),
            "AQ" => Some(Country::Antarctica),
            "AG" => Some(Country::AntiguaAndBarbuda),
            "AR" => Some(Country::Argentina),
            "AM" => Some(Country::Armenia),
            "AW" => Some(Country::Aruba),
            "AU" => Some(Country::Australia),
            "AT" => Some(Country::Austria),
            "AZ" => Some(Country::Azerbaijan),
            "BS" => Some(Country::Bahamas),
            "BH" => Some(Country::Bahrain),
            "BD" => Some(Country::Bangladesh),
            "BB" => Some(Country::Barbados),
            "BY" => Some(Country::Belarus),
            "BE" => Some(Country::Belgium),
            "BZ" => Some(Country::Belize),
            "BJ" => Some(Country::Benin),
            "BM" => Some(Country::Bermuda),
            "BT" => Some(Country::Bhutan),
            "BO" => Some(Country::BoliviaPlurinationalStateOf),
            "BQ" => Some(Country::BonaireSintEustatiusAndSaba),
            "BA" => Some(Country::BosniaAndHerzegovina),
            "BW" => Some(Country::Botswana),
            "BV" => Some(Country::BouvetIsland),
            "BR" => Some(Country::Brazil),
            "IO" => Some(Country::BritishIndianOceanTerritory),
            "BN" => Some(Country::BruneiDarussalam),
            "BG" => Some(Country::Bulgaria),
            "BF" => Some(Country::BurkinaFaso),
            "BI" => Some(Country::Burundi),
            "KH" => Some(Country::Cambodia),
            "CM" => Some(Country::Cameroon),
            "CA" => Some(Country::Canada),
            "CV" => Some(Country::CapeVerde),
            "KY" => Some(Country::CaymanIslands),
            "CF" => Some(Country::CentralAfricanRepublic),
            "TD" => Some(Country::Chad),
            "CL" => Some(Country::Chile),
            "CN" => Some(Country::China),
            "CX" => Some(Country::ChristmasIsland),
            "CC" => Some(Country::CocosKeelingIslands),
            "CO" => Some(Country::Colombia),
            "KM" => Some(Country::Comoros),
            "CG" => Some(Country::Congo),
            "CD" => Some(Country::CongoTheDemocraticRepublicOfThe),
            "CK" => Some(Country::CookIslands),
            "CR" => Some(Country::CostaRica),
            "CI" => Some(Country::CoteDivoire),
            "HR" => Some(Country::Croatia),
            "CU" => Some(Country::Cuba),
            "CW" => Some(Country::Curacao),
            "CY" => Some(Country::Cyprus),
            "CZ" => Some(Country::CzechRepublic),
            "DK" => Some(Country::Denmark),
            "DJ" => Some(Country::Djibouti),
            "DM" => Some(Country::Dominica),
            "DO" => Some(Country::DominicanRepublic),
            "EC" => Some(Country::Ecuador),
            "EG" => Some(Country::Egypt),
            "SV" => Some(Country::ElSalvador),
            "GQ" => Some(Country::EquatorialGuinea),
            "ER" => Some(Country::Eritrea),
            "EE" => Some(Country::Estonia),
            "ET" => Some(Country::Ethiopia),
            "FK" => Some(Country::FalklandIslandsMalvinas),
            "FO" => Some(Country::FaroeIslands),
            "FJ" => Some(Country::Fiji),
            "FI" => Some(Country::Finland),
            "FR" => Some(Country::France),
            "GF" => Some(Country::FrenchGuiana),
            "PF" => Some(Country::FrenchPolynesia),
            "TF" => Some(Country::FrenchSouthernTerritories),
            "GA" => Some(Country::Gabon),
            "GM" => Some(Country::Gambia),
            "GE" => Some(Country::Georgia),
            "DE" => Some(Country::Germany),
            "GH" => Some(Country::Ghana),
            "GI" => Some(Country::Gibraltar),
            "GR" => Some(Country::Greece),
            "GL" => Some(Country::Greenland),
            "GD" => Some(Country::Grenada),
            "GP" => Some(Country::Guadeloupe),
            "GU" => Some(Country::Guam),
            "GT" => Some(Country::Guatemala),
            "GG" => Some(Country::Guernsey),
            "GN" => Some(Country::Guinea),
            "GW" => Some(Country::GuineaBissau),
            "GY" => Some(Country::Guyana),
            "HT" => Some(Country::Haiti),
            "HM" => Some(Country::HeardIslandAndMcdonaldIslands),
            "VA" => Some(Country::HolySeeVaticanCityState),
            "HN" => Some(Country::Honduras),
            "HK" => Some(Country::HongKong),
            "HU" => Some(Country::Hungary),
            "IS" => Some(Country::Iceland),
            "IN" => Some(Country::India),
            "ID" => Some(Country::Indonesia),
            "IR" => Some(Country::IranIslamicRepublicOf),
            "IQ" => Some(Country::Iraq),
            "IE" => Some(Country::Ireland),
            "IM" => Some(Country::IsleOfMan),
            "IL" => Some(Country::Israel),
            "IT" => Some(Country::Italy),
            "JM" => Some(Country::Jamaica),
            "JP" => Some(Country::Japan),
            "JE" => Some(Country::Jersey),
            "JO" => Some(Country::Jordan),
            "KZ" => Some(Country::Kazakhstan),
            "KE" => Some(Country::Kenya),
            "KI" => Some(Country::Kiribati),
            "KP" => Some(Country::KoreaDemocraticPeopleRepublicOf),
            "KR" => Some(Country::KoreaRepublicOf),
            "KW" => Some(Country::Kuwait),
            "KG" => Some(Country::Kyrgyzstan),
            "LA" => Some(Country::LaoPeopleDemocraticRepublic),
            "LV" => Some(Country::Latvia),
            "LB" => Some(Country::Lebanon),
            "LS" => Some(Country::Lesotho),
            "LR" => Some(Country::Liberia),
            "LY" => Some(Country::Libya),
            "LI" => Some(Country::Liechtenstein),
            "LT" => Some(Country::Lithuania),
            "LU" => Some(Country::Luxembourg),
            "MO" => Some(Country::Macao),
            "MK" => Some(Country::MacedoniaTheFormerYugoslavRepublicOf),
            "MG" => Some(Country::Madagascar),
            "MW" => Some(Country::Malawi),
            "MY" => Some(Country::Malaysia),
            "MV" => Some(Country::Maldives),
            "ML" => Some(Country::Mali),
            "MT" => Some(Country::Malta),
            "MH" => Some(Country::MarshallIslands),
            "MQ" => Some(Country::Martinique),
            "MR" => Some(Country::Mauritania),
            "MU" => Some(Country::Mauritius),
            "YT" => Some(Country::Mayotte),
            "MX" => Some(Country::Mexico),
            "FM" => Some(Country::MicronesiaFederatedStatesOf),
            "MD" => Some(Country::MoldovaRepublicOf),
            "MC" => Some(Country::Monaco),
            "MN" => Some(Country::Mongolia),
            "ME" => Some(Country::Montenegro),
            "MS" => Some(Country::Montserrat),
            "MA" => Some(Country::Morocco),
            "MZ" => Some(Country::Mozambique),
            "MM" => Some(Country::Myanmar),
            "NA" => Some(Country::Namibia),
            "NR" => Some(Country::Nauru),
            "NP" => Some(Country::Nepal),
            "NL" => Some(Country::Netherlands),
            "NC" => Some(Country::NewCaledonia),
            "NZ" => Some(Country::NewZealand),
            "NI" => Some(Country::Nicaragua),
            "NE" => Some(Country::Niger),
            "NG" => Some(Country::Nigeria),
            "NU" => Some(Country::Niue),
            "NF" => Some(Country::NorfolkIsland),
            "MP" => Some(Country::NorthernMarianaIslands),
            "NO" => Some(Country::Norway),
            "OM" => Some(Country::Oman),
            "PK" => Some(Country::Pakistan),
            "PW" => Some(Country::Palau),
            "PS" => Some(Country::PalestineStateOf),
            "PA" => Some(Country::Panama),
            "PG" => Some(Country::PapuaNewGuinea),
            "PY" => Some(Country::Paraguay),
            "PE" => Some(Country::Peru),
            "PH" => Some(Country::Philippines),
            "PN" => Some(Country::Pitcairn),
            "PL" => Some(Country::Poland),
            "PT" => Some(Country::Portugal),
            "PR" => Some(Country::PuertoRico),
            "QA" => Some(Country::Qatar),
            "RE" => Some(Country::Reunion),
            "RO" => Some(Country::Romania),
            "RU" => Some(Country::RussianFederation),
            "RW" => Some(Country::Rwanda),
            "BL" => Some(Country::SaintBarthelemy),
            "SH" => Some(Country::SaintHelenaAscensionAndTristanDaCunha),
            "KN" => Some(Country::SaintKittsAndNevis),
            "LC" => Some(Country::SaintLucia),
            "MF" => Some(Country::SaintMartinFrenchPart),
            "PM" => Some(Country::SaintPierreAndMiquelon),
            "VC" => Some(Country::SaintVincentAndTheGrenadines),
            "WS" => Some(Country::Samoa),
            "SM" => Some(Country::SanMarino),
            "ST" => Some(Country::SaoTomeAndPrincipe),
            "SA" => Some(Country::SaudiArabia),
            "SN" => Some(Country::Senegal),
            "RS" => Some(Country::Serbia),
            "SC" => Some(Country::Seychelles),
            "SL" => Some(Country::SierraLeone),
            "SG" => Some(Country::Singapore),
            "SX" => Some(Country::SintMaartenDutchPart),
            "SK" => Some(Country::Slovakia),
            "SI" => Some(Country::Slovenia),
            "SB" => Some(Country::SolomonIslands),
            "SO" => Some(Country::Somalia),
            "ZA" => Some(Country::SouthAfrica),
            "GS" => Some(Country::SouthGeorgiaAndTheSouthSandwichIslands),
            "SS" => Some(Country::SouthSudan),
            "ES" => Some(Country::Spain),
            "LK" => Some(Country::SriLanka),
            "SD" => Some(Country::Sudan),
            "SR" => Some(Country::Suriname),
            "SJ" => Some(Country::SvalbardAndJanMayen),
            "SZ" => Some(Country::Swaziland),
            "SE" => Some(Country::Sweden),
            "CH" => Some(Country::Switzerland),
            "SY" => Some(Country::SyrianArabRepublic),
            "TW" => Some(Country::TaiwanProvinceOfChina),
            "TJ" => Some(Country::Tajikistan),
            "TZ" => Some(Country::TanzaniaUnitedRepublicOf),
            "TH" => Some(Country::Thailand),
            "TL" => Some(Country::TimorLeste),
            "TG" => Some(Country::Togo),
            "TK" => Some(Country::Tokelau),
            "TO" => Some(Country::Tonga),
            "TT" => Some(Country::TrinidadAndTobago),
            "TN" => Some(Country::Tunisia),
            "TR" => Some(Country::Turkey),
            "TM" => Some(Country::Turkmenistan),
            "TC" => Some(Country::TurksAndCaicosIslands),
            "TV" => Some(Country::Tuvalu),
            "UG" => Some(Country::Uganda),
            "UA" => Some(Country::Ukraine),
            "AE" => Some(Country::UnitedArabEmirates),
            "GB" => Some(Country::UnitedKingdom),
            "US" => Some(Country::UnitedStates),
            "UM" => Some(Country::UnitedStatesMinorOutlyingIslands),
            "UY" => Some(Country::Uruguay),
            "UZ" => Some(Country::Uzbekistan),
            "VU" => Some(Country::Vanuatu),
            "VE" => Some(Country::VenezuelaBolivarianRepublicOf),
            "VN" => Some(Country::VietNam),
            "VG" => Some(Country::VirginIslandsBritish),
            "VI" => Some(Country::VirginIslandsUS),
            "WF" => Some(Country::WallisAndFutuna),
            "EH" => Some(Country::WesternSahara),
            "YE" => Some(Country::Yemen),
            "ZM" => Some(Country::Zambia),
            "ZW" => Some(Country::Zimbabwe),

            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            Country::Afghanistan => "AF",
            Country::AlandIslands => "AX",
            Country::Albania => "AL",
            Country::Algeria => "DZ",
            Country::AmericanSamoa => "AS",
            Country::Andorra => "AD",
            Country::Angola => "AO",
            Country::Anguilla => "AI",
            Country::Antarctica => "AQ",
            Country::AntiguaAndBarbuda => "AG",
            Country::Argentina => "AR",
            Country::Armenia => "AM",
            Country::Aruba => "AW",
            Country::Australia => "AU",
            Country::Austria => "AT",
            Country::Azerbaijan => "AZ",
            Country::Bahamas => "BS",
            Country::Bahrain => "BH",
            Country::Bangladesh => "BD",
            Country::Barbados => "BB",
            Country::Belarus => "BY",
            Country::Belgium => "BE",
            Country::Belize => "BZ",
            Country::Benin => "BJ",
            Country::Bermuda => "BM",
            Country::Bhutan => "BT",
            Country::BoliviaPlurinationalStateOf => "BO",
            Country::BonaireSintEustatiusAndSaba => "BQ",
            Country::BosniaAndHerzegovina => "BA",
            Country::Botswana => "BW",
            Country::BouvetIsland => "BV",
            Country::Brazil => "BR",
            Country::BritishIndianOceanTerritory => "IO",
            Country::BruneiDarussalam => "BN",
            Country::Bulgaria => "BG",
            Country::BurkinaFaso => "BF",
            Country::Burundi => "BI",
            Country::Cambodia => "KH",
            Country::Cameroon => "CM",
            Country::Canada => "CA",
            Country::CapeVerde => "CV",
            Country::CaymanIslands => "KY",
            Country::CentralAfricanRepublic => "CF",
            Country::Chad => "TD",
            Country::Chile => "CL",
            Country::China => "CN",
            Country::ChristmasIsland => "CX",
            Country::CocosKeelingIslands => "CC",
            Country::Colombia => "CO",
            Country::Comoros => "KM",
            Country::Congo => "CG",
            Country::CongoTheDemocraticRepublicOfThe => "CD",
            Country::CookIslands => "CK",
            Country::CostaRica => "CR",
            Country::CoteDivoire => "CI",
            Country::Croatia => "HR",
            Country::Cuba => "CU",
            Country::Curacao => "CW",
            Country::Cyprus => "CY",
            Country::CzechRepublic => "CZ",
            Country::Denmark => "DK",
            Country::Djibouti => "DJ",
            Country::Dominica => "DM",
            Country::DominicanRepublic => "DO",
            Country::Ecuador => "EC",
            Country::Egypt => "EG",
            Country::ElSalvador => "SV",
            Country::EquatorialGuinea => "GQ",
            Country::Eritrea => "ER",
            Country::Estonia => "EE",
            Country::Ethiopia => "ET",
            Country::FalklandIslandsMalvinas => "FK",
            Country::FaroeIslands => "FO",
            Country::Fiji => "FJ",
            Country::Finland => "FI",
            Country::France => "FR",
            Country::FrenchGuiana => "GF",
            Country::FrenchPolynesia => "PF",
            Country::FrenchSouthernTerritories => "TF",
            Country::Gabon => "GA",
            Country::Gambia => "GM",
            Country::Georgia => "GE",
            Country::Germany => "DE",
            Country::Ghana => "GH",
            Country::Gibraltar => "GI",
            Country::Greece => "GR",
            Country::Greenland => "GL",
            Country::Grenada => "GD",
            Country::Guadeloupe => "GP",
            Country::Guam => "GU",
            Country::Guatemala => "GT",
            Country::Guernsey => "GG",
            Country::Guinea => "GN",
            Country::GuineaBissau => "GW",
            Country::Guyana => "GY",
            Country::Haiti => "HT",
            Country::HeardIslandAndMcdonaldIslands => "HM",
            Country::HolySeeVaticanCityState => "VA",
            Country::Honduras => "HN",
            Country::HongKong => "HK",
            Country::Hungary => "HU",
            Country::Iceland => "IS",
            Country::India => "IN",
            Country::Indonesia => "ID",
            Country::IranIslamicRepublicOf => "IR",
            Country::Iraq => "IQ",
            Country::Ireland => "IE",
            Country::IsleOfMan => "IM",
            Country::Israel => "IL",
            Country::Italy => "IT",
            Country::Jamaica => "JM",
            Country::Japan => "JP",
            Country::Jersey => "JE",
            Country::Jordan => "JO",
            Country::Kazakhstan => "KZ",
            Country::Kenya => "KE",
            Country::Kiribati => "KI",
            Country::KoreaDemocraticPeopleRepublicOf => "KP",
            Country::KoreaRepublicOf => "KR",
            Country::Kuwait => "KW",
            Country::Kyrgyzstan => "KG",
            Country::LaoPeopleDemocraticRepublic => "LA",
            Country::Latvia => "LV",
            Country::Lebanon => "LB",
            Country::Lesotho => "LS",
            Country::Liberia => "LR",
            Country::Libya => "LY",
            Country::Liechtenstein => "LI",
            Country::Lithuania => "LT",
            Country::Luxembourg => "LU",
            Country::Macao => "MO",
            Country::MacedoniaTheFormerYugoslavRepublicOf => "MK",
            Country::Madagascar => "MG",
            Country::Malawi => "MW",
            Country::Malaysia => "MY",
            Country::Maldives => "MV",
            Country::Mali => "ML",
            Country::Malta => "MT",
            Country::MarshallIslands => "MH",
            Country::Martinique => "MQ",
            Country::Mauritania => "MR",
            Country::Mauritius => "MU",
            Country::Mayotte => "YT",
            Country::Mexico => "MX",
            Country::MicronesiaFederatedStatesOf => "FM",
            Country::MoldovaRepublicOf => "MD",
            Country::Monaco => "MC",
            Country::Mongolia => "MN",
            Country::Montenegro => "ME",
            Country::Montserrat => "MS",
            Country::Morocco => "MA",
            Country::Mozambique => "MZ",
            Country::Myanmar => "MM",
            Country::Namibia => "NA",
            Country::Nauru => "NR",
            Country::Nepal => "NP",
            Country::Netherlands => "NL",
            Country::NewCaledonia => "NC",
            Country::NewZealand => "NZ",
            Country::Nicaragua => "NI",
            Country::Niger => "NE",
            Country::Nigeria => "NG",
            Country::Niue => "NU",
            Country::NorfolkIsland => "NF",
            Country::NorthernMarianaIslands => "MP",
            Country::Norway => "NO",
            Country::Oman => "OM",
            Country::Pakistan => "PK",
            Country::Palau => "PW",
            Country::PalestineStateOf => "PS",
            Country::Panama => "PA",
            Country::PapuaNewGuinea => "PG",
            Country::Paraguay => "PY",
            Country::Peru => "PE",
            Country::Philippines => "PH",
            Country::Pitcairn => "PN",
            Country::Poland => "PL",
            Country::Portugal => "PT",
            Country::PuertoRico => "PR",
            Country::Qatar => "QA",
            Country::Reunion => "RE",
            Country::Romania => "RO",
            Country::RussianFederation => "RU",
            Country::Rwanda => "RW",
            Country::SaintBarthelemy => "BL",
            Country::SaintHelenaAscensionAndTristanDaCunha => "SH",
            Country::SaintKittsAndNevis => "KN",
            Country::SaintLucia => "LC",
            Country::SaintMartinFrenchPart => "MF",
            Country::SaintPierreAndMiquelon => "PM",
            Country::SaintVincentAndTheGrenadines => "VC",
            Country::Samoa => "WS",
            Country::SanMarino => "SM",
            Country::SaoTomeAndPrincipe => "ST",
            Country::SaudiArabia => "SA",
            Country::Senegal => "SN",
            Country::Serbia => "RS",
            Country::Seychelles => "SC",
            Country::SierraLeone => "SL",
            Country::Singapore => "SG",
            Country::SintMaartenDutchPart => "SX",
            Country::Slovakia => "SK",
            Country::Slovenia => "SI",
            Country::SolomonIslands => "SB",
            Country::Somalia => "SO",
            Country::SouthAfrica => "ZA",
            Country::SouthGeorgiaAndTheSouthSandwichIslands => "GS",
            Country::SouthSudan => "SS",
            Country::Spain => "ES",
            Country::SriLanka => "LK",
            Country::Sudan => "SD",
            Country::Suriname => "SR",
            Country::SvalbardAndJanMayen => "SJ",
            Country::Swaziland => "SZ",
            Country::Sweden => "SE",
            Country::Switzerland => "CH",
            Country::SyrianArabRepublic => "SY",
            Country::TaiwanProvinceOfChina => "TW",
            Country::Tajikistan => "TJ",
            Country::TanzaniaUnitedRepublicOf => "TZ",
            Country::Thailand => "TH",
            Country::TimorLeste => "TL",
            Country::Togo => "TG",
            Country::Tokelau => "TK",
            Country::Tonga => "TO",
            Country::TrinidadAndTobago => "TT",
            Country::Tunisia => "TN",
            Country::Turkey => "TR",
            Country::Turkmenistan => "TM",
            Country::TurksAndCaicosIslands => "TC",
            Country::Tuvalu => "TV",
            Country::Uganda => "UG",
            Country::Ukraine => "UA",
            Country::UnitedArabEmirates => "AE",
            Country::UnitedKingdom => "GB",
            Country::UnitedStates => "US",
            Country::UnitedStatesMinorOutlyingIslands => "UM",
            Country::Uruguay => "UY",
            Country::Uzbekistan => "UZ",
            Country::Vanuatu => "VU",
            Country::VenezuelaBolivarianRepublicOf => "VE",
            Country::VietNam => "VN",
            Country::VirginIslandsBritish => "VG",
            Country::VirginIslandsUS => "VI",
            Country::WallisAndFutuna => "WF",
            Country::WesternSahara => "EH",
            Country::Yemen => "YE",
            Country::Zambia => "ZM",
            Country::Zimbabwe => "ZW",
        }
    }
}
impl fmt::Debug for Country {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Country::Afghanistan => write!(f, "AF"),
            Country::AlandIslands => write!(f, "AX"),
            Country::Albania => write!(f, "AL"),
            Country::Algeria => write!(f, "DZ"),
            Country::AmericanSamoa => write!(f, "AS"),
            Country::Andorra => write!(f, "AD"),
            Country::Angola => write!(f, "AO"),
            Country::Anguilla => write!(f, "AI"),
            Country::Antarctica => write!(f, "AQ"),
            Country::AntiguaAndBarbuda => write!(f, "AG"),
            Country::Argentina => write!(f, "AR"),
            Country::Armenia => write!(f, "AM"),
            Country::Aruba => write!(f, "AW"),
            Country::Australia => write!(f, "AU"),
            Country::Austria => write!(f, "AT"),
            Country::Azerbaijan => write!(f, "AZ"),
            Country::Bahamas => write!(f, "BS"),
            Country::Bahrain => write!(f, "BH"),
            Country::Bangladesh => write!(f, "BD"),
            Country::Barbados => write!(f, "BB"),
            Country::Belarus => write!(f, "BY"),
            Country::Belgium => write!(f, "BE"),
            Country::Belize => write!(f, "BZ"),
            Country::Benin => write!(f, "BJ"),
            Country::Bermuda => write!(f, "BM"),
            Country::Bhutan => write!(f, "BT"),
            Country::BoliviaPlurinationalStateOf => write!(f, "BO"),
            Country::BonaireSintEustatiusAndSaba => write!(f, "BQ"),
            Country::BosniaAndHerzegovina => write!(f, "BA"),
            Country::Botswana => write!(f, "BW"),
            Country::BouvetIsland => write!(f, "BV"),
            Country::Brazil => write!(f, "BR"),
            Country::BritishIndianOceanTerritory => write!(f, "IO"),
            Country::BruneiDarussalam => write!(f, "BN"),
            Country::Bulgaria => write!(f, "BG"),
            Country::BurkinaFaso => write!(f, "BF"),
            Country::Burundi => write!(f, "BI"),
            Country::Cambodia => write!(f, "KH"),
            Country::Cameroon => write!(f, "CM"),
            Country::Canada => write!(f, "CA"),
            Country::CapeVerde => write!(f, "CV"),
            Country::CaymanIslands => write!(f, "KY"),
            Country::CentralAfricanRepublic => write!(f, "CF"),
            Country::Chad => write!(f, "TD"),
            Country::Chile => write!(f, "CL"),
            Country::China => write!(f, "CN"),
            Country::ChristmasIsland => write!(f, "CX"),
            Country::CocosKeelingIslands => write!(f, "CC"),
            Country::Colombia => write!(f, "CO"),
            Country::Comoros => write!(f, "KM"),
            Country::Congo => write!(f, "CG"),
            Country::CongoTheDemocraticRepublicOfThe => write!(f, "CD"),
            Country::CookIslands => write!(f, "CK"),
            Country::CostaRica => write!(f, "CR"),
            Country::CoteDivoire => write!(f, "CI"),
            Country::Croatia => write!(f, "HR"),
            Country::Cuba => write!(f, "CU"),
            Country::Curacao => write!(f, "CW"),
            Country::Cyprus => write!(f, "CY"),
            Country::CzechRepublic => write!(f, "CZ"),
            Country::Denmark => write!(f, "DK"),
            Country::Djibouti => write!(f, "DJ"),
            Country::Dominica => write!(f, "DM"),
            Country::DominicanRepublic => write!(f, "DO"),
            Country::Ecuador => write!(f, "EC"),
            Country::Egypt => write!(f, "EG"),
            Country::ElSalvador => write!(f, "SV"),
            Country::EquatorialGuinea => write!(f, "GQ"),
            Country::Eritrea => write!(f, "ER"),
            Country::Estonia => write!(f, "EE"),
            Country::Ethiopia => write!(f, "ET"),
            Country::FalklandIslandsMalvinas => write!(f, "FK"),
            Country::FaroeIslands => write!(f, "FO"),
            Country::Fiji => write!(f, "FJ"),
            Country::Finland => write!(f, "FI"),
            Country::France => write!(f, "FR"),
            Country::FrenchGuiana => write!(f, "GF"),
            Country::FrenchPolynesia => write!(f, "PF"),
            Country::FrenchSouthernTerritories => write!(f, "TF"),
            Country::Gabon => write!(f, "GA"),
            Country::Gambia => write!(f, "GM"),
            Country::Georgia => write!(f, "GE"),
            Country::Germany => write!(f, "DE"),
            Country::Ghana => write!(f, "GH"),
            Country::Gibraltar => write!(f, "GI"),
            Country::Greece => write!(f, "GR"),
            Country::Greenland => write!(f, "GL"),
            Country::Grenada => write!(f, "GD"),
            Country::Guadeloupe => write!(f, "GP"),
            Country::Guam => write!(f, "GU"),
            Country::Guatemala => write!(f, "GT"),
            Country::Guernsey => write!(f, "GG"),
            Country::Guinea => write!(f, "GN"),
            Country::GuineaBissau => write!(f, "GW"),
            Country::Guyana => write!(f, "GY"),
            Country::Haiti => write!(f, "HT"),
            Country::HeardIslandAndMcdonaldIslands => write!(f, "HM"),
            Country::HolySeeVaticanCityState => write!(f, "VA"),
            Country::Honduras => write!(f, "HN"),
            Country::HongKong => write!(f, "HK"),
            Country::Hungary => write!(f, "HU"),
            Country::Iceland => write!(f, "IS"),
            Country::India => write!(f, "IN"),
            Country::Indonesia => write!(f, "ID"),
            Country::IranIslamicRepublicOf => write!(f, "IR"),
            Country::Iraq => write!(f, "IQ"),
            Country::Ireland => write!(f, "IE"),
            Country::IsleOfMan => write!(f, "IM"),
            Country::Israel => write!(f, "IL"),
            Country::Italy => write!(f, "IT"),
            Country::Jamaica => write!(f, "JM"),
            Country::Japan => write!(f, "JP"),
            Country::Jersey => write!(f, "JE"),
            Country::Jordan => write!(f, "JO"),
            Country::Kazakhstan => write!(f, "KZ"),
            Country::Kenya => write!(f, "KE"),
            Country::Kiribati => write!(f, "KI"),
            Country::KoreaDemocraticPeopleRepublicOf => write!(f, "KP"),
            Country::KoreaRepublicOf => write!(f, "KR"),
            Country::Kuwait => write!(f, "KW"),
            Country::Kyrgyzstan => write!(f, "KG"),
            Country::LaoPeopleDemocraticRepublic => write!(f, "LA"),
            Country::Latvia => write!(f, "LV"),
            Country::Lebanon => write!(f, "LB"),
            Country::Lesotho => write!(f, "LS"),
            Country::Liberia => write!(f, "LR"),
            Country::Libya => write!(f, "LY"),
            Country::Liechtenstein => write!(f, "LI"),
            Country::Lithuania => write!(f, "LT"),
            Country::Luxembourg => write!(f, "LU"),
            Country::Macao => write!(f, "MO"),
            Country::MacedoniaTheFormerYugoslavRepublicOf => write!(f, "MK"),
            Country::Madagascar => write!(f, "MG"),
            Country::Malawi => write!(f, "MW"),
            Country::Malaysia => write!(f, "MY"),
            Country::Maldives => write!(f, "MV"),
            Country::Mali => write!(f, "ML"),
            Country::Malta => write!(f, "MT"),
            Country::MarshallIslands => write!(f, "MH"),
            Country::Martinique => write!(f, "MQ"),
            Country::Mauritania => write!(f, "MR"),
            Country::Mauritius => write!(f, "MU"),
            Country::Mayotte => write!(f, "YT"),
            Country::Mexico => write!(f, "MX"),
            Country::MicronesiaFederatedStatesOf => write!(f, "FM"),
            Country::MoldovaRepublicOf => write!(f, "MD"),
            Country::Monaco => write!(f, "MC"),
            Country::Mongolia => write!(f, "MN"),
            Country::Montenegro => write!(f, "ME"),
            Country::Montserrat => write!(f, "MS"),
            Country::Morocco => write!(f, "MA"),
            Country::Mozambique => write!(f, "MZ"),
            Country::Myanmar => write!(f, "MM"),
            Country::Namibia => write!(f, "NA"),
            Country::Nauru => write!(f, "NR"),
            Country::Nepal => write!(f, "NP"),
            Country::Netherlands => write!(f, "NL"),
            Country::NewCaledonia => write!(f, "NC"),
            Country::NewZealand => write!(f, "NZ"),
            Country::Nicaragua => write!(f, "NI"),
            Country::Niger => write!(f, "NE"),
            Country::Nigeria => write!(f, "NG"),
            Country::Niue => write!(f, "NU"),
            Country::NorfolkIsland => write!(f, "NF"),
            Country::NorthernMarianaIslands => write!(f, "MP"),
            Country::Norway => write!(f, "NO"),
            Country::Oman => write!(f, "OM"),
            Country::Pakistan => write!(f, "PK"),
            Country::Palau => write!(f, "PW"),
            Country::PalestineStateOf => write!(f, "PS"),
            Country::Panama => write!(f, "PA"),
            Country::PapuaNewGuinea => write!(f, "PG"),
            Country::Paraguay => write!(f, "PY"),
            Country::Peru => write!(f, "PE"),
            Country::Philippines => write!(f, "PH"),
            Country::Pitcairn => write!(f, "PN"),
            Country::Poland => write!(f, "PL"),
            Country::Portugal => write!(f, "PT"),
            Country::PuertoRico => write!(f, "PR"),
            Country::Qatar => write!(f, "QA"),
            Country::Reunion => write!(f, "RE"),
            Country::Romania => write!(f, "RO"),
            Country::RussianFederation => write!(f, "RU"),
            Country::Rwanda => write!(f, "RW"),
            Country::SaintBarthelemy => write!(f, "BL"),
            Country::SaintHelenaAscensionAndTristanDaCunha => write!(f, "SH"),
            Country::SaintKittsAndNevis => write!(f, "KN"),
            Country::SaintLucia => write!(f, "LC"),
            Country::SaintMartinFrenchPart => write!(f, "MF"),
            Country::SaintPierreAndMiquelon => write!(f, "PM"),
            Country::SaintVincentAndTheGrenadines => write!(f, "VC"),
            Country::Samoa => write!(f, "WS"),
            Country::SanMarino => write!(f, "SM"),
            Country::SaoTomeAndPrincipe => write!(f, "ST"),
            Country::SaudiArabia => write!(f, "SA"),
            Country::Senegal => write!(f, "SN"),
            Country::Serbia => write!(f, "RS"),
            Country::Seychelles => write!(f, "SC"),
            Country::SierraLeone => write!(f, "SL"),
            Country::Singapore => write!(f, "SG"),
            Country::SintMaartenDutchPart => write!(f, "SX"),
            Country::Slovakia => write!(f, "SK"),
            Country::Slovenia => write!(f, "SI"),
            Country::SolomonIslands => write!(f, "SB"),
            Country::Somalia => write!(f, "SO"),
            Country::SouthAfrica => write!(f, "ZA"),
            Country::SouthGeorgiaAndTheSouthSandwichIslands => write!(f, "GS"),
            Country::SouthSudan => write!(f, "SS"),
            Country::Spain => write!(f, "ES"),
            Country::SriLanka => write!(f, "LK"),
            Country::Sudan => write!(f, "SD"),
            Country::Suriname => write!(f, "SR"),
            Country::SvalbardAndJanMayen => write!(f, "SJ"),
            Country::Swaziland => write!(f, "SZ"),
            Country::Sweden => write!(f, "SE"),
            Country::Switzerland => write!(f, "CH"),
            Country::SyrianArabRepublic => write!(f, "SY"),
            Country::TaiwanProvinceOfChina => write!(f, "TW"),
            Country::Tajikistan => write!(f, "TJ"),
            Country::TanzaniaUnitedRepublicOf => write!(f, "TZ"),
            Country::Thailand => write!(f, "TH"),
            Country::TimorLeste => write!(f, "TL"),
            Country::Togo => write!(f, "TG"),
            Country::Tokelau => write!(f, "TK"),
            Country::Tonga => write!(f, "TO"),
            Country::TrinidadAndTobago => write!(f, "TT"),
            Country::Tunisia => write!(f, "TN"),
            Country::Turkey => write!(f, "TR"),
            Country::Turkmenistan => write!(f, "TM"),
            Country::TurksAndCaicosIslands => write!(f, "TC"),
            Country::Tuvalu => write!(f, "TV"),
            Country::Uganda => write!(f, "UG"),
            Country::Ukraine => write!(f, "UA"),
            Country::UnitedArabEmirates => write!(f, "AE"),
            Country::UnitedKingdom => write!(f, "GB"),
            Country::UnitedStates => write!(f, "US"),
            Country::UnitedStatesMinorOutlyingIslands => write!(f, "UM"),
            Country::Uruguay => write!(f, "UY"),
            Country::Uzbekistan => write!(f, "UZ"),
            Country::Vanuatu => write!(f, "VU"),
            Country::VenezuelaBolivarianRepublicOf => write!(f, "VE"),
            Country::VietNam => write!(f, "VN"),
            Country::VirginIslandsBritish => write!(f, "VG"),
            Country::VirginIslandsUS => write!(f, "VI"),
            Country::WallisAndFutuna => write!(f, "WF"),
            Country::WesternSahara => write!(f, "EH"),
            Country::Yemen => write!(f, "YE"),
            Country::Zambia => write!(f, "ZM"),
            Country::Zimbabwe => write!(f, "ZW"),
        }
    }
}

///repeat state: track, context or off.
/// - track will repeat the current track.
/// - context will repeat the current context.
/// - off will turn repeat off.
#[derive(Clone, Debug, Copy, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum RepeatState {
    Off,
    Track,
    Context,
}
impl RepeatState {
    pub fn from_str(s: &str) -> Option<RepeatState> {
        match s {
            "off" => Some(RepeatState::Off),
            "track" => Some(RepeatState::Track),
            "context" => Some(RepeatState::Context),
            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            RepeatState::Off => "off",
            RepeatState::Track => "track",
            RepeatState::Context => "context",
        }
    }
}

/// Type for search: artist, album, track, playlist
#[derive(Clone, Serialize, Deserialize, Copy, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum SearchType {
    Artist,
    Album,
    Track,
    Playlist,
}

impl SearchType {
    pub fn from_str(s: &str) -> Option<SearchType> {
        match s {
            "artist" => Some(SearchType::Artist),
            "album" => Some(SearchType::Album),
            "track" => Some(SearchType::Track),
            "playlist" => Some(SearchType::Playlist),
            _ => None,
        }
    }
    pub fn as_str(&self) -> &str {
        match *self {
            SearchType::Album => "album",
            SearchType::Artist => "artist",
            SearchType::Track => "track",
            SearchType::Playlist => "playlist",
        }
    }
}

impl fmt::Debug for SearchType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            SearchType::Album => write!(f, "album"),
            SearchType::Artist => write!(f, "artist"),
            SearchType::Track => write!(f, "track"),
            SearchType::Playlist => write!(f, "playlist"),
        }
    }
}

/// Device Type: computer, smartphone, speaker, TV, etc.
/// See the [Spotify developer
/// docs](https://developer.spotify.com/documentation/web-api/reference/player/get-a-users-available-devices/#device-types)
/// for more information, or in case we are missing a device type here.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub enum DeviceType {
    Computer,
    Tablet,
    Smartphone,
    Speaker,
    TV,
    AVR,
    STB,
    AudioDongle,
    GameConsole,
    CastVideo,
    CastAudio,
    Automobile,
    Unknown,
}
